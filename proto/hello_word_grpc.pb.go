// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: hello_word.proto

package hello_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloWordServerClient is the client API for HelloWordServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloWordServerClient interface {
	GetHelloWord(ctx context.Context, in *HelloWordRequest, opts ...grpc.CallOption) (*HelloWordReply, error)
}

type helloWordServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloWordServerClient(cc grpc.ClientConnInterface) HelloWordServerClient {
	return &helloWordServerClient{cc}
}

func (c *helloWordServerClient) GetHelloWord(ctx context.Context, in *HelloWordRequest, opts ...grpc.CallOption) (*HelloWordReply, error) {
	out := new(HelloWordReply)
	err := c.cc.Invoke(ctx, "/hello_grpc.HelloWordServer/GetHelloWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloWordServerServer is the server API for HelloWordServer service.
// All implementations must embed UnimplementedHelloWordServerServer
// for forward compatibility
type HelloWordServerServer interface {
	GetHelloWord(context.Context, *HelloWordRequest) (*HelloWordReply, error)
	mustEmbedUnimplementedHelloWordServerServer()
}

// UnimplementedHelloWordServerServer must be embedded to have forward compatible implementations.
type UnimplementedHelloWordServerServer struct {
}

func (UnimplementedHelloWordServerServer) GetHelloWord(context.Context, *HelloWordRequest) (*HelloWordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelloWord not implemented")
}
func (UnimplementedHelloWordServerServer) mustEmbedUnimplementedHelloWordServerServer() {}

// UnsafeHelloWordServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloWordServerServer will
// result in compilation errors.
type UnsafeHelloWordServerServer interface {
	mustEmbedUnimplementedHelloWordServerServer()
}

func RegisterHelloWordServerServer(s grpc.ServiceRegistrar, srv HelloWordServerServer) {
	s.RegisterService(&HelloWordServer_ServiceDesc, srv)
}

func _HelloWordServer_GetHelloWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWordServerServer).GetHelloWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello_grpc.HelloWordServer/GetHelloWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWordServerServer).GetHelloWord(ctx, req.(*HelloWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloWordServer_ServiceDesc is the grpc.ServiceDesc for HelloWordServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloWordServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello_grpc.HelloWordServer",
	HandlerType: (*HelloWordServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHelloWord",
			Handler:    _HelloWordServer_GetHelloWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello_word.proto",
}
